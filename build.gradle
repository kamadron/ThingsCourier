/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/7.6.3/userguide/building_java_projects.html
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
    id 'java'
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    // This dependency is used by the application.
    implementation 'commons-net:commons-net:3.11.1'
    
    implementation 'org.apache.logging.log4j:log4j-api:2.19.0'
    implementation 'org.apache.logging.log4j:log4j-core:2.19.0'
    
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    
    // Use JUnit test framework.
    testImplementation 'junit:junit:4.13.2'
}

//******************************************************************************************************
// CREATE RUNNABLE JAR
//******************************************************************************************************
tasks.named('jar') {
	duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    manifest {
            attributes ('Main-Class': 'pl.mk.tc.starter.Starter')
    }
}

//******************************************************************************************************
// CREATE FAT JAR TO BE RUNNED INDEPENDENTLY
//******************************************************************************************************
task fatJar(type: Jar) {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    manifest.from jar.manifest
    classifier = 'all'
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
	{
        exclude "META-INF/*.SF"
        exclude "META-INF/*.DSA"
        exclude "META-INF/*.RSA"
    }
    with jar
}

artifacts {
    archives fatJar
}

//*******************************************************************************************************
// RENAME NORMAL JAR INTO SLIM ONE AND FAT JAR SETS TO THE NORMAL ONE
//*******************************************************************************************************
build.doLast{
    def ver = '-' + findProperty('version');
    def jarName = jar.archiveName
    def fatJarName = jarName.replaceAll('.jar','-all.jar')
    
	System.out.println('BEFORE naming change:')
	System.out.println('version= ' + ver)
	System.out.println('jarName= ' + jarName);
	System.out.println('fatJarName= ' + fatJarName);
	System.out.println("buildDir= $project.buildDir\\libs\\");
	
    def jarFullPath = "$project.buildDir\\libs\\"+jarName
    def fatJarFullPath = "$project.buildDir\\libs\\"+fatJarName
	
	jarName = jarName.replaceAll(ver, '')
	
    def jarFullPathNew = "$project.buildDir\\libs\\"+jarName+'.slim'
    def fatJarFullPathNew = "$project.buildDir\\libs\\"+jarName
	
	System.out.println('AFTER naming change:')
	System.out.println('jarFullPathNew= ' + jarFullPathNew)
	System.out.println('fatJarFullPathNew= ' + fatJarFullPathNew)
    
    //rename slim jar's name
    file(jarFullPath).renameTo(file(jarFullPathNew))
    
    //rename fat jar's name
    file(fatJarFullPath).renameTo(file(fatJarFullPathNew))
}